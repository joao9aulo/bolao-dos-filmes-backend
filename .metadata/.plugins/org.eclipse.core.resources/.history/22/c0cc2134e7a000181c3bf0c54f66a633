package com.example.demo.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Movie;
import com.example.demo.model.User;
import com.example.demo.repository.MovieRepository;
import com.example.exception.ResourceNotFoundException;

@CrossOrigin(origins = "http://localhost:4200") 
@RestController
@RequestMapping("/api")
public class MovieController {

	@Autowired
	MovieRepository movieRepository;
	
	@GetMapping("/movies")
	public List<Movie> getAllMovies() {
	    return movieRepository.findAll();
	}

	@PostMapping("/movies")
	public Movie createMovie(@Valid @RequestBody Movie movie) {
	    return movieRepository.save(movie);
	}

	@GetMapping("/movies/{id}")
	public Movie getMovieById(@PathVariable(value = "id") Long movieId) {
	    return movieRepository.findById(movieId)
	            .orElseThrow(() -> new ResourceNotFoundException("Note", "id", movieId));
	}

	@PutMapping("/movies/{id}")
	public Movie updateMovie(@PathVariable(value = "id") Long movieId,
	                                        @Valid @RequestBody Movie movieUpdate) {

		Movie movie = movieRepository.findById(movieId)
	            .orElseThrow(() -> new ResourceNotFoundException("Movie", "id", movieId));

		movie.setName(movieUpdate.getName());

	    Movie updatedMovie = movieRepository.save(movie);
	    return updatedMovie;
	}

	@DeleteMapping("/movies/{id}")
	public ResponseEntity<?> deleteNote(@PathVariable(value = "id") Long movieId) {
	    Movie movie = movieRepository.findById(movieId)
	            .orElseThrow(() -> new ResourceNotFoundException("Movie", "id", movieId));

	    movieRepository.delete(movie);

	    return ResponseEntity.ok().build();
	}
}
